---
# Configuration-Driven Development Environment
- name: Setup Development Environment
  hosts: all
  become: yes
  vars:
      # Default values, will be overridden by config
      default_user: "{{ lookup('env', 'PROJECT_USER') | default('developer') }}"
      default_workspace: '/workspace'
      # Use global temp directory to avoid user permission issues
      ansible_remote_tmp: '/tmp'

  # Load and process configuration
  pre_tasks:
      - name: Check if running in container
        stat:
            path: /.dockerenv
        register: dockerenv_stat

      - name: Set container fact
        set_fact:
            is_docker_container: "{{ dockerenv_stat.stat.exists }}"

      - name: Check for merged configuration from Vagrant
        stat:
            path: '/tmp/vm-config.json'
        register: config_file_stat

      - name: Load merged configuration from Vagrant
        set_fact:
            project_config: "{{ lookup('file', '/tmp/vm-config.json') | from_json }}"
        when: config_file_stat.stat.exists

      - name: Use minimal fallback configuration
        set_fact:
            project_config:
                project:
                    name: "{{ ansible_hostname.split('.')[0] | default('project') }}"
                    hostname: "dev.{{ ansible_hostname.split('.')[0] | default('project') }}.local"
                    workspace_path: '{{ default_workspace }}'
                vm:
                    user: '{{ default_user }}'
        when: not config_file_stat.stat.exists

      - name: Check for terminal themes
        stat:
            path: '/app/shared/themes.json'
        register: themes_file_stat

      - name: Load terminal themes
        set_fact:
            terminal_themes: "{{ lookup('file', '/app/shared/themes.json') | from_json }}"
        when: themes_file_stat.stat.exists

      - name: Use fallback Dracula theme
        set_fact:
            terminal_themes:
                dracula:
                    name: 'Dracula'
                    colors:
                        foreground: '#f8f8f2'
                        background: '#282a36'
                        red: '#ff5555'
                        green: '#50fa7b'
                        yellow: '#f1fa8c'
                        blue: '#bd93f9'
                        magenta: '#ff79c6'
                        cyan: '#8be9fd'
                        bright_black: '#6272a4'
        when: not themes_file_stat.stat.exists

      - name: Set derived variables
        set_fact:
            project_name: "{{ project_config.project.name | default('project') }}"
            project_user: '{{ project_config.vm.user | default(default_user) }}'
            project_path: '{{ project_config.project.workspace_path | default(default_workspace) }}'
            project_hostname: "{{ project_config.project.hostname | default('dev.' + (project_config.project.name | default('project')) + '.local') }}"
            terminal_emoji: "{{ project_config.terminal.emoji | default('🚀') }}"
            terminal_username: "{{ project_config.terminal.username | default('dev') }}"
            terminal_theme_name: "{{ project_config.terminal.theme | default('dracula') }}"
            show_git_branch: '{{ project_config.terminal.show_git_branch | default(true) }}'
            show_timestamp: '{{ project_config.terminal.show_timestamp | default(false) }}'
            terminal_colors: "{{ terminal_themes[project_config.terminal.theme | default('dracula')].colors | default(terminal_themes.dracula.colors) }}"
            home_dir: "/home/{{ project_config.vm.user | default(default_user) }}"
            # Consolidated conditions for package manager installation requirements
            nodejs_required: >-
              (project_config.npm_packages is defined and project_config.npm_packages is not none and project_config.npm_packages | length > 0) or
              project_config.claude_sync | default(false) or
              project_config.gemini_sync | default(false)
            pip_packages_required: "{{ project_config.pip_packages is defined and project_config.pip_packages | length > 0 }}"
            cargo_packages_required: "{{ project_config.cargo_packages is defined and project_config.cargo_packages | length > 0 }}"
            apt_packages_required: "{{ project_config.apt_packages is defined and project_config.apt_packages | length > 0 }}"
            # Environment template configuration
            env_template_configured: "{{ project_config.project.env_template_path is defined and project_config.project.env_template_path }}"
            # Consolidated condition for port configurations
            ports_configured: >-
              project_config.ports is defined and
              project_config.ports is mapping and
              project_config.ports | length > 0

      # User creation pre-task
      - name: Ensure project user exists with correct UID/GID
        user:
            name: '{{ project_user }}'
            uid: '{{ lookup("env", "HOST_UID") | default(ansible_user_uid, true) }}'
            gid: '{{ lookup("env", "HOST_GID") | default(ansible_user_gid, true) }}'
            home: '/home/{{ project_user }}'
            shell: /bin/bash
            create_home: yes
            groups: sudo,docker
        when: ansible_facts['user_id'] == 0  # Only when running as root
        become: yes
        ignore_errors: yes  # Continue if user already exists

      - name: Ensure project user home directory exists
        file:
            path: '/home/{{ project_user }}'
            state: directory
            owner: '{{ project_user }}'
            group: '{{ project_user }}'
            mode: '0755'
        become: yes
        when: ansible_facts['user_id'] == 0

      - name: Fix home directory permissions
        file:
            path: '/home/{{ project_user }}'
            owner: '{{ project_user }}'
            group: '{{ project_user }}'
            recurse: yes
        when: ansible_facts['user_id'] == 0
        become: yes
        ignore_errors: yes  # Continue if some files can't be changed


  handlers:
      - name: restart postgresql
        systemd:
            name: postgresql
            state: restarted
            daemon_reload: yes
        when: not is_docker_container

      - name: restart redis
        systemd:
            name: redis-server
            state: restarted
        when: not is_docker_container

      - name: restart mongodb
        systemd:
            name: mongod
            state: restarted
            daemon_reload: yes
        when: not is_docker_container

      - name: restart ssh
        systemd:
            name: ssh
            state: restarted
        when: not is_docker_container

      - name: restart audio
        systemd:
            name: pulseaudio
            state: restarted
            scope: user
        when: not is_docker_container
        ignore_errors: yes

      - name: restart audio
        command: supervisorctl restart audio
        when: is_docker_container
        ignore_errors: yes

      - name: restart supervisor
        shell: |
          if ! pgrep supervisord > /dev/null; then
            supervisord -c /etc/supervisor/supervisord.conf
            sleep 2
          fi
          supervisorctl reread && supervisorctl update
        when: is_docker_container

  tasks:
      # System configuration
      - name: Set hostname
        hostname:
            name: '{{ project_hostname }}'
        when: not is_docker_container

      - name: Update /etc/hosts with hostname
        lineinfile:
            path: /etc/hosts
            regexp: '^127\.0\.1\.1'
            line: "127.0.1.1 {{ project_hostname }} {{ project_hostname.split('.')[0] }}"
        when: not is_docker_container

      - name: Update /etc/hosts in container
        shell: |
            grep -v '^127.0.1.1' /etc/hosts > /tmp/hosts.new
            echo "127.0.1.1 {{ project_hostname }} {{ project_hostname.split('.')[0] }}" >> /tmp/hosts.new
            cat /tmp/hosts.new > /etc/hosts
        when: is_docker_container

      - name: Update apt cache
        apt:
            update_cache: yes
            cache_valid_time: 3600

      # Setup supervisor for Docker containers
      - name: Setup supervisor for Docker containers
        block:
          - name: Create supervisor directories with proper permissions
            file:
              path: "{{ item }}"
              state: directory
              owner: root
              group: root
              mode: '0755'
            loop:
              - /var/log/supervisor
              - /var/run/supervisor

          - name: Configure supervisor for Docker with stdout logging
            copy:
              dest: /etc/supervisor/supervisord.conf
              content: |
                [unix_http_server]
                file=/var/run/supervisor/supervisor.sock
                chmod=0770
                chown=root:root

                [supervisord]
                nodaemon=true
                logfile=/var/log/supervisor/supervisord.log
                logfile_maxbytes=50MB
                logfile_backups=10
                pidfile=/var/run/supervisor/supervisord.pid
                user=root

                [rpcinterface:supervisor]
                supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

                [supervisorctl]
                serverurl=unix:///var/run/supervisor/supervisor.sock

                [include]
                files = /etc/supervisor/conf.d/*.conf
        when: is_docker_container

      # Locale configuration
      - name: Wait for apt lock to be released
        shell: while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do sleep 1; done
      - name: Install locale packages
        apt:
            name:
                - locales
                - locales-all
            state: present
        retries: 5
        delay: 10
        register: locale_install
        until: locale_install is succeeded

      - name: Generate en_US.UTF-8 locale
        locale_gen:
            name: en_US.UTF-8
            state: present

      - name: Set system locale
        copy:
            dest: /etc/default/locale
            content: |
                LANG=en_US.UTF-8
                LANGUAGE=en_US:en
                LC_ALL=en_US.UTF-8
                LC_CTYPE=en_US.UTF-8
            mode: '0644'
        no_log: true

      # Timezone configuration (unified method for both VM and container)
      - name: Set system timezone
        shell: |
            ln -sf /usr/share/zoneinfo/{{ project_config.vm.timezone | default('UTC') }} /etc/localtime
            echo "{{ project_config.vm.timezone | default('UTC') }}" > /etc/timezone

      - name: Install base system packages
        apt:
            name:
                - curl
                - wget
                - git
                - git-lfs
                - build-essential
                - python3-pip
                - python3-dev
                - python3-venv
                - ufw
                - fail2ban
                - unattended-upgrades
                - python3-psycopg2
                - zsh
                - zsh-syntax-highlighting
                - supervisor
            state: present
        retries: 5
        delay: 10
        register: base_packages_install
        until: base_packages_install is succeeded

      # Security setup - Configure rules first, enable last
      - name: Allow SSH (critical - must be first)
        ufw:
            rule: allow
            port: 22
            proto: tcp
            comment: 'Allow SSH access'
        when: not is_docker_container

      - name: Allow configured ports from localhost
        ufw:
            rule: allow
            port: '{{ item.value }}'
            proto: tcp
            from_ip: 127.0.0.1
            comment: 'Allow {{ item.key }} port'
        with_dict: '{{ project_config.ports | default({}) }}'
        when:
            - ports_configured
            - not is_docker_container

      - name: Allow configured ports from Vagrant host
        ufw:
            rule: allow
            port: '{{ item.value }}'
            proto: tcp
            from_ip: 10.0.2.2
            comment: 'Allow {{ item.key }} port from Vagrant host'
        with_dict: '{{ project_config.ports | default({}) }}'
        when:
            - ports_configured
            - not is_docker_container

      # Install Node.js/npm if npm_packages is defined OR claude_sync/gemini_sync enabled
      - name: Download NVM installer
        get_url:
            url: "https://raw.githubusercontent.com/nvm-sh/nvm/{{ project_config.versions.nvm | default('v0.40.3') }}/install.sh"
            dest: /tmp/install_nvm.sh
            mode: '0755'
        become_user: '{{ project_user }}'
        when: nodejs_required

      - name: Install NVM
        shell: /tmp/install_nvm.sh
        args:
            creates: '/home/{{ project_user }}/.nvm/nvm.sh'
        become_user: '{{ project_user }}'
        when: nodejs_required

      # Change default shell to zsh
      - name: Change user shell to zsh
        user:
            name: '{{ project_user }}'
            shell: /usr/bin/zsh

      - name: Generate .zshrc from template
        template:
            src: /app/shared/templates/zshrc.j2
            dest: '/home/{{ project_user }}/.zshrc'
            owner: '{{ project_user }}'
            group: '{{ project_user }}'
            mode: '0644'
        become_user: root
        no_log: true

      - name: Install Node.js
        shell: |
            source ~/.nvm/nvm.sh
            nvm install {{ project_config.versions.node | default('22') }}
            nvm use {{ project_config.versions.node | default('22') }}
            nvm alias default {{ project_config.versions.node | default('22') }}
        args:
            executable: /bin/bash
        become_user: '{{ project_user }}'
        when: nodejs_required

      - name: Update npm to latest version
        shell: |
            source ~/.nvm/nvm.sh
            npm install -g npm@{{ project_config.versions.npm | default('latest') }}
        args:
            executable: /bin/bash
        become_user: '{{ project_user }}'
        when: nodejs_required
        ignore_errors: yes

      - name: Enable corepack for pnpm
        shell: |
            source ~/.nvm/nvm.sh
            corepack enable
        args:
            executable: /bin/bash
        become_user: '{{ project_user }}'
        when: nodejs_required

      - name: Install pnpm via corepack
        shell: |
            source ~/.nvm/nvm.sh
            corepack prepare pnpm@{{ project_config.versions.pnpm | default('10.12.3') }} --activate
        args:
            executable: /bin/bash
        become_user: '{{ project_user }}'
        register: corepack_result
        when: nodejs_required
        ignore_errors: yes

      - name: Install pnpm via npm if corepack failed
        shell: |
            source ~/.nvm/nvm.sh
            npm install -g pnpm@{{ project_config.versions.pnpm | default('10.12.3') }}
            echo "✅ Installed pnpm via npm as fallback"
        args:
            executable: /bin/bash
        become_user: '{{ project_user }}'
        when:
          - nodejs_required
          - corepack_result.failed | default(false)

      - name: Install additional APT packages
        apt:
            name: '{{ project_config.apt_packages }}'
            state: present
        retries: 5
        delay: 10
        register: apt_packages_install
        until: apt_packages_install is succeeded
        when: apt_packages_required


      - name: Install Claude Code CLI
        shell: |
            source ~/.nvm/nvm.sh
            npm install -g @anthropic-ai/claude-code
        args:
            executable: /bin/bash
        become_user: '{{ project_user }}'
        when: project_config.claude_sync | default(false)
        ignore_errors: yes

      - name: Install Gemini CLI
        shell: |
            source ~/.nvm/nvm.sh
            npm install -g @google/gemini-cli
        args:
            executable: /bin/bash
        become_user: '{{ project_user }}'
        when: project_config.gemini_sync | default(false)
        ignore_errors: yes

      - name: Install container pipx packages
        shell: |
            pipx ensurepath
            pipx install {{ item }}
        become_user: '{{ project_user }}'
        loop: "{{ project_config.container_pipx_packages | default([]) }}"
        when: project_config.container_pipx_packages is defined and project_config.container_pipx_packages | length > 0
        ignore_errors: yes

      - name: Ensure Python build tools are up-to-date
        pip:
          name:
            - pip
            - setuptools
            - wheel
          state: latest
          extra_args: '--user --break-system-packages'
          executable: pip3
        become_user: '{{ project_user }}'
        ignore_errors: yes

      - name: Install dependencies for local packages
        shell: |
            echo "Installing dependencies for local package {{ item.key }}..."
            cd /opt/local-packages/{{ item.key }}
            if [ -f pyproject.toml ]; then
                python3 -c "
import tomllib, subprocess, sys
try:
    with open('pyproject.toml', 'rb') as f:
        data = tomllib.load(f)
    deps = data.get('project', {}).get('dependencies', [])
    if deps:
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', '--user', '--break-system-packages'] + deps)
except Exception as e:
    print(f'Could not install dependencies for {{ item.key }}: {e}', file=sys.stderr)
"
            elif [ -f requirements.txt ]; then
                pip3 install --user --break-system-packages -r requirements.txt
            fi
        args:
          executable: /bin/bash
        become_user: '{{ project_user }}'
        loop: "{{ project_config.local_pipx_packages | dict2items | default([]) }}"
        when: project_config.local_pipx_packages is defined
        ignore_errors: yes

      - name: Create console script wrappers for local packages
        shell: |
            echo "Creating script wrappers for local package {{ item.key }}..."
            cd /opt/local-packages/{{ item.key }}
            if [ -f pyproject.toml ]; then
                python3 -c "
import tomllib, os, stat, sys
try:
    with open('pyproject.toml', 'rb') as f:
        data = tomllib.load(f)
    scripts = data.get('project', {}).get('scripts', {})
    for name, entry_point in scripts.items():
        wrapper_path = f'/usr/local/bin/{name}'
        module, function = entry_point.split(':')
        print(f'Creating wrapper for {name} at {wrapper_path}')
        wrapper_content = f'''#!/usr/bin/env python3
import sys
from {module} import {function}
sys.exit({function}())
'''
        with open(wrapper_path, 'w') as f:
            f.write(wrapper_content)
        os.chmod(wrapper_path, stat.S_IRWXU | stat.S_IRGRP | stat.S_IXGRP | stat.S_IROTH | stat.S_IXOTH)
except Exception as e:
    print(f'Could not create wrapper for {{ item.key }}: {e}', file=sys.stderr)
"
            fi
        args:
          executable: /bin/bash
        become: yes
        loop: "{{ project_config.local_pipx_packages | dict2items | default([]) }}"
        when: project_config.local_pipx_packages is defined
        ignore_errors: yes

      - name: Install pnpm via npm as fallback
        shell: |
            source ~/.nvm/nvm.sh
            if ! which pnpm > /dev/null 2>&1; then
                npm install -g pnpm@{{ project_config.versions.pnpm | default('10.12.3') }}
            fi
        args:
            executable: /bin/bash
        become_user: '{{ project_user }}'
        when: project_config.versions.pnpm is defined

      # ================================================================================
      # CONDITIONAL PACKAGE MANAGER INSTALLATIONS
      # Only install package managers when their respective packages are defined
      # ================================================================================

      # Install Rust/Cargo if cargo_packages is defined
      - name: Check if Rust is already installed
        stat:
          path: '{{ home_dir }}/.cargo/bin/cargo'
        register: cargo_installed
        become_user: '{{ project_user }}'
        when: cargo_packages_required

      - name: Install Rust via rustup
        when: cargo_packages_required and not cargo_installed.stat.exists
        block:
          - name: Download rustup installer
            get_url:
              url: https://sh.rustup.rs
              dest: /tmp/rustup.sh
              mode: '0755'
            become_user: '{{ project_user }}'

          - name: Install Rust
            shell: |
              /tmp/rustup.sh -y --default-toolchain {{ project_config.versions.rust | default('stable') }} --no-modify-path
            args:
              executable: /bin/bash
            become_user: '{{ project_user }}'
            environment:
              CARGO_HOME: '{{ home_dir }}/.cargo'
              RUSTUP_HOME: '{{ home_dir }}/.rustup'

          - name: Clean up rustup installer
            file:
              path: /tmp/rustup.sh
              state: absent


      # Install pip and pipx if pip_packages is defined
      - name: Check if pipx is installed
        command: which pipx
        register: pipx_check
        failed_when: false
        changed_when: false
        when: pip_packages_required

      - name: Install pipx for Python package management
        apt:
            name: pipx
            state: present
        when:
          - pip_packages_required
          - pipx_check is defined and pipx_check.rc != 0
        retries: 5
        delay: 10
        register: pipx_install
        until: pipx_install is succeeded

      - name: Ensure pipx PATH is configured
        shell: |
            pipx ensurepath
        become_user: '{{ project_user }}'
        when: pip_packages_required
        ignore_errors: yes

      - name: Ensure pip is installed for Python libraries
        apt:
            name: python3-pip
            state: present
        when: pip_packages_required
        retries: 5
        delay: 10
        register: pip_install_apt
        until: pip_install_apt is succeeded

      # ================================================================================
      # PACKAGE INSTALLATIONS
      # Install packages for each configured package manager
      # ================================================================================



      # Load service definitions
      - name: Load service definitions
        include_vars: /app/shared/services/service_definitions.yml

      # Install and configure all enabled services using reusable task
      - name: Install and configure enabled services
        include_tasks: tasks/manage-service.yml
        vars:
          service_name: "{{ service_item.key }}"
          service_config: "{{ service_item.value }}"
          # Consolidated service definition access with defaults
          current_service_def: "{{ service_definitions[service_item.key] | default({}) }}"
          service_packages: "{{ current_service_def.service_packages | default([]) }}"
          service_dependencies: "{{ current_service_def.service_dependencies | default([]) }}"
          service_gpg_key_url: "{{ current_service_def.service_gpg_key_url | default('') }}"
          service_repository: "{{ current_service_def.service_repository | default('') }}"
          service_config_lines: "{{ current_service_def.service_config_lines | default([]) }}"
          service_version_command: "{{ current_service_def.service_version_command | default('') }}"
          service_versioned_config_lines: "{{ current_service_def.service_versioned_config_lines | default([]) }}"
          service_systemd_name: "{{ current_service_def.service_systemd_name | default('') }}"
          service_systemd_daemon_reload: "{{ current_service_def.service_systemd_daemon_reload | default(false) }}"
          service_supervisor_command: "{{ current_service_def.service_supervisor_command | default('') }}"
          service_supervisor_user: "{{ current_service_def.service_supervisor_user | default('') }}"
          service_supervisor_environment: "{{ current_service_def.service_supervisor_environment | default('') }}"
          service_port: "{{ current_service_def.service_port | default('') }}"
          service_post_install_commands: "{{ current_service_def.service_post_install_commands | default([]) }}"
          service_ignore_errors: "{{ current_service_def.service_ignore_errors | default(false) }}"
        loop: "{{ project_config.services | dict2items }}"
        loop_control:
          loop_var: service_item
        when:
          - service_item.value.enabled | default(false)
          - service_item.key in service_definitions
          - service_item.key != 'docker'  # Docker handled separately due to user group requirements

      # Handle Docker service separately (requires user group management)
      - name: Install Docker
        apt:
            name:
                - docker.io
                - docker-compose
            state: present
        retries: 5
        delay: 10
        register: docker_install
        until: docker_install is succeeded
        when: project_config.services.docker.enabled | default(false)

      - name: Add user to docker group
        user:
            name: '{{ project_user }}'
            groups: docker
            append: yes
        when: project_config.services.docker.enabled | default(false)

      # Handle special services that need additional configuration
      - name: Create Xvfb systemd service file
        copy:
            dest: /etc/systemd/system/xvfb.service
            content: |
                [Unit]
                Description=X Virtual Framebuffer
                After=network.target
                [Service]
                Type=simple
                ExecStart=/usr/bin/Xvfb :99 -screen 0 1024x768x24 -ac
                Restart=always
                [Install]
                WantedBy=multi-user.target
        when:
          - project_config.services.headless_browser.enabled | default(false)
          - not is_docker_container
        no_log: true

      # Handle database backup restoration for PostgreSQL
      - name: Check for database backup
        find:
            paths: '{{ project_path }}/backups'
            patterns: "{{ project_config.backup_pattern | default('*backup*.sql.gz') }}"
        register: backup_files
        when: project_config.services.postgresql.enabled | default(false)

      - name: Restore database from backup
        shell: |
            gunzip -c "{{ (backup_files.files | sort(attribute='mtime') | last).path }}" | sudo -u postgres psql -p {{ project_config.ports.postgresql | default(5432) }} -d "{{ project_config.services.postgresql.database }}"
        when:
          - project_config.services.postgresql.enabled | default(false)
          - backup_files is defined
          - backup_files.files | length > 0

      # Claude Code setup
      - name: Create Claude settings directory
        file:
            path: '/home/{{ project_user }}/.claude'
            state: directory
            owner: '{{ project_user }}'
            mode: '0755'

      - name: Copy shared Claude settings
        copy:
            src: '/app/shared/claude-settings/'
            dest: '/home/{{ project_user }}/.claude/'
            remote_src: yes
            owner: '{{ project_user }}'

      # Gemini CLI setup
      - name: Create Gemini settings directory
        file:
            path: '/home/{{ project_user }}/.gemini'
            state: directory
            owner: '{{ project_user }}'
            mode: '0755'

      - name: Check for project Gemini settings
        stat:
            path: '/app/shared/gemini-settings/settings.json'
        register: gemini_settings

      - name: Copy project Gemini settings
        copy:
            src: '/app/shared/gemini-settings/settings.json'
            dest: '/home/{{ project_user }}/.gemini/settings.json'
            remote_src: yes
            owner: '{{ project_user }}'
        when: gemini_settings.stat.exists

      - name: Use default Gemini settings
        copy:
            dest: '/home/{{ project_user }}/.gemini/settings.json'
            owner: '{{ project_user }}'
            content: |
                {
                  "model": "gemini-2.5-pro",
                  "interactive": true
                }
        when: not gemini_settings.stat.exists
        no_log: true


      # Project-specific environment setup
      - name: Check for .env template
        stat:
            path: '{{ project_path }}/{{ project_config.project.env_template_path }}'
        register: env_template
        when: env_template_configured

      - name: Copy .env template
        copy:
            src: '{{ project_path }}/{{ project_config.project.env_template_path }}'
            dest: '{{ project_path }}/{{ project_config.project.env_template_path | dirname }}/.env'
            remote_src: yes
            owner: '{{ project_user }}'
        when:
            - env_template_configured
            - env_template.stat.exists

      - name: Configure DATABASE_URL in .env
        lineinfile:
            path: '{{ project_path }}/{{ project_config.project.env_template_path | dirname }}/.env'
            regexp: '^DATABASE_URL='
            line: "DATABASE_URL=postgresql://{{ project_config.services.postgresql.user | default('postgres') }}:{{ project_config.services.postgresql.password | default('postgres') }}@localhost:{{ project_config.ports.postgresql | default(project_config.services.postgresql.port | default(5432)) }}/{{ project_config.services.postgresql.database }}"
        when:
            - env_template_configured
            - env_template.stat.exists
            - project_config.services.postgresql.enabled | default(false)

      - name: Configure REDIS_URL in .env
        lineinfile:
            path: '{{ project_path }}/{{ project_config.project.env_template_path | dirname }}/.env'
            regexp: '^REDIS_URL='
            line: 'REDIS_URL=redis://localhost:{{ project_config.ports.redis | default(project_config.services.redis.port | default(6379)) }}'
        when:
            - env_template_configured
            - env_template.stat.exists
            - project_config.services.redis.enabled | default(false)


      # Check for lock files
      - name: Check for pnpm-lock.yaml
        stat:
            path: '{{ project_path }}/pnpm-lock.yaml'
        register: pnpm_lock

      - name: Check for package-lock.json
        stat:
            path: '{{ project_path }}/package-lock.json'
        register: npm_lock

      - name: Check for yarn.lock (legacy)
        stat:
            path: '{{ project_path }}/yarn.lock'
        register: yarn_lock

      # Install project dependencies
      - name: Install pnpm dependencies
        shell: |
            export NVM_DIR="/home/{{ project_user }}/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd {{ project_path }}
            pnpm install
        args:
            executable: /bin/bash
        become_user: '{{ project_user }}'
        async: 1800 # 30 minutes timeout
        poll: 30 # Check every 30 seconds
        when:
            - config_file_stat.stat.exists
            - pnpm_lock.stat.exists

      - name: Check if build script exists
        shell: |
            export NVM_DIR="/home/{{ project_user }}/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd {{ project_path }}
            if pnpm run --silent list | grep -q "build"; then
              echo "build_exists"
            else
              echo "no_build"
            fi
        args:
            executable: /bin/bash
        become_user: '{{ project_user }}'
        register: build_check
        when:
            - config_file_stat.stat.exists
            - pnpm_lock.stat.exists

      - name: Run build script if it exists
        shell: |
            export NVM_DIR="/home/{{ project_user }}/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd {{ project_path }}
            pnpm build
        args:
            executable: /bin/bash
        become_user: '{{ project_user }}'
        when:
            - config_file_stat.stat.exists
            - pnpm_lock.stat.exists
            - build_check.stdout == "build_exists"

      - name: Install NPM dependencies
        shell: |
            export NVM_DIR="/home/{{ project_user }}/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            cd {{ project_path }}
            npm install
        args:
            executable: /bin/bash
        become_user: '{{ project_user }}'
        when:
            - config_file_stat.stat.exists
            - npm_lock.stat.exists
            - not pnpm_lock.stat.exists

      # Git configuration
      - name: Configure Git safe directory
        command: git config --global --add safe.directory {{ project_path }}
        become_user: '{{ project_user }}'

      # Enable UFW after all rules are configured
      - name: Enable UFW with default deny policy
        ufw:
            state: enabled
            default: deny
            direction: incoming
            logging: on
        notify: restart ssh
        when: not is_docker_container

      # Ensure supervisor is started and services are loaded in Docker

      # Final message
      - name: Display completion message
        debug:
            msg: |
                🎉 Development environment configured!

                📁 Project: {{ project_name }}
                📍 Path: {{ project_path }}
                🛠️ Tools: Node.js, Claude Code, Gemini CLI

                💡 Ready to code!
