# VM Tool Self-Contained Development Container
FROM ubuntu:24.04

# Build arguments for users, and package versions
ARG PROJECT_USER=developer
ARG PROJECT_UID=1000
ARG PROJECT_GID=1000
ARG NODE_VERSION=22
ARG NVM_VERSION=v0.40.3
ARG PNPM_VERSION=10.12.3
ARG RUST_VERSION=stable

# Build arguments for package lists
ARG APT_PACKAGES
ARG NPM_PACKAGES
ARG PIP_PACKAGES
ARG PIPX_PACKAGES
ARG CARGO_PACKAGES

ENV DEBIAN_FRONTEND=noninteractive
ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US:en
ENV LC_ALL=en_US.UTF-8
ENV TZ=UTC

# --- Base System Setup ---
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt/lists,sharing=locked \
    apt-get update && apt-get install -y \
    locales \
    curl wget git git-lfs build-essential \
    python3 python3-dev python3-pip python3-venv \
    ansible \
    supervisor \
    sudo \
    zsh zsh-syntax-highlighting \
    tzdata \
    && locale-gen en_US.UTF-8 && update-locale LANG=en_US.UTF-8

# --- User Setup ---
RUN groupadd -f -g ${PROJECT_GID} ${PROJECT_USER} && \
    useradd -m -u ${PROJECT_UID} -g ${PROJECT_GID} -s /bin/zsh ${PROJECT_USER} && \
    usermod -aG sudo ${PROJECT_USER} && \
    echo "${PROJECT_USER} ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/90-nopasswd-user

USER ${PROJECT_USER}
WORKDIR /home/${PROJECT_USER}
SHELL ["/bin/bash", "-c"]

# --- Language Runtimes & Package Managers ---
# Pre-create .nvm directory with correct ownership before cache mount
RUN mkdir -p /home/${PROJECT_USER}/.nvm

RUN --mount=type=cache,target=/home/${PROJECT_USER}/.nvm/.cache,uid=${PROJECT_UID},gid=${PROJECT_GID} \
    curl -o- "https://raw.githubusercontent.com/nvm-sh/nvm/${NVM_VERSION}/install.sh" | bash && \
    export NVM_DIR="$HOME/.nvm" && \
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && \
    nvm install ${NODE_VERSION} && \
    nvm use ${NODE_VERSION} && \
    nvm alias default ${NODE_VERSION} && \
    corepack enable && \
    corepack prepare pnpm@${PNPM_VERSION} --activate

RUN --mount=type=cache,target=/home/${PROJECT_USER}/.rustup,uid=${PROJECT_UID},gid=${PROJECT_GID} \
    if [ -n "${CARGO_PACKAGES}" ]; then \
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain ${RUST_VERSION} --no-modify-path; \
fi

RUN if [ -n "${PIPX_PACKAGES}" ]; then \
    python3 -m pip install --user --break-system-packages pipx; \
    python3 -m pipx ensurepath; \
fi

# --- Package Installation ---
ENV NVM_DIR=/home/${PROJECT_USER}/.nvm
ENV PATH="/home/${PROJECT_USER}/.cargo/bin:/home/${PROJECT_USER}/.local/bin:${NVM_DIR}/versions/node/v${NODE_VERSION}/bin:${PATH}"

USER root
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt/lists,sharing=locked \
    if [ -n "${APT_PACKAGES}" ]; then \
    apt-get update && apt-get install -y ${APT_PACKAGES}; \
fi
USER ${PROJECT_USER}

# NPM Package Installation
RUN --mount=type=cache,target=/home/${PROJECT_USER}/.npm,uid=${PROJECT_UID},gid=${PROJECT_GID} \
    if [ -n "${NPM_PACKAGES}" ]; then \
        echo "Installing NPM packages: ${NPM_PACKAGES}"; \
        . "$NVM_DIR/nvm.sh" && npm install -g ${NPM_PACKAGES}; \
    fi

# Python Package Installation
RUN --mount=type=cache,target=/home/${PROJECT_USER}/.cache/pip,uid=${PROJECT_UID},gid=${PROJECT_GID} \
    if [ -n "${PIP_PACKAGES}" ]; then \
        echo "Installing Python packages: ${PIP_PACKAGES}"; \
        pip3 install --user --break-system-packages ${PIP_PACKAGES}; \
    fi

# Cargo Package Installation
RUN --mount=type=cache,target=/home/${PROJECT_USER}/.cargo/registry,uid=${PROJECT_UID},gid=${PROJECT_GID} \
    --mount=type=cache,target=/home/${PROJECT_USER}/.cargo/git,uid=${PROJECT_UID},gid=${PROJECT_GID} \
    if [ -n "${CARGO_PACKAGES}" ]; then \
        echo "Installing Cargo packages: ${CARGO_PACKAGES}"; \
        . "$HOME/.cargo/env" && cargo install ${CARGO_PACKAGES}; \
    fi


# --- Resource & Configuration Embedding ---
USER root
RUN mkdir -p /app/shared/ansible /app/shared/services /app/shared/templates /app/shared/settings
COPY --chown=${PROJECT_UID}:${PROJECT_GID} shared /app/shared

# --- Cargo Registry Configuration ---
USER ${PROJECT_USER}
RUN echo '' >> /home/${PROJECT_USER}/.zshrc && \
    echo '# --- VM CARGO REGISTRY CONFIGURATION ---' >> /home/${PROJECT_USER}/.zshrc && \
    echo 'if [ -n "$VM_CARGO_REGISTRY_HOST" ] && [ -n "$VM_CARGO_REGISTRY_PORT" ]; then' >> /home/${PROJECT_USER}/.zshrc && \
    echo '    mkdir -p ~/.cargo' >> /home/${PROJECT_USER}/.zshrc && \
    echo '    cat > ~/.cargo/config.toml << EOF' >> /home/${PROJECT_USER}/.zshrc && \
    echo '[source.crates-io]' >> /home/${PROJECT_USER}/.zshrc && \
    echo 'replace-with = "vm-registry"' >> /home/${PROJECT_USER}/.zshrc && \
    echo '' >> /home/${PROJECT_USER}/.zshrc && \
    echo '[source.vm-registry]' >> /home/${PROJECT_USER}/.zshrc && \
    echo "registry = \"sparse+http://\${VM_CARGO_REGISTRY_HOST}:\${VM_CARGO_REGISTRY_PORT}/cargo/\"" >> /home/${PROJECT_USER}/.zshrc && \
    echo '' >> /home/${PROJECT_USER}/.zshrc && \
    echo '[net]' >> /home/${PROJECT_USER}/.zshrc && \
    echo 'retry = 2' >> /home/${PROJECT_USER}/.zshrc && \
    echo 'EOF' >> /home/${PROJECT_USER}/.zshrc && \
    echo 'fi' >> /home/${PROJECT_USER}/.zshrc

# --- Finalization ---
USER ${PROJECT_USER}
WORKDIR /workspace
CMD ["tail", "-f", "/dev/null"]