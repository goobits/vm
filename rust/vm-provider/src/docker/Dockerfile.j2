# VM Tool Self-Contained Development Container
ARG base_image=ubuntu:24.04
FROM ${base_image}

# Build arguments for users, and package versions
ARG PROJECT_USER=developer
ARG PROJECT_UID=1000
ARG PROJECT_GID=1000
ARG NODE_VERSION=22
ARG NVM_VERSION=v0.40.3
ARG PNPM_VERSION=10.12.3
ARG RUST_VERSION=stable

# Build arguments for package lists
ARG APT_PACKAGES
ARG NPM_PACKAGES
ARG PIP_PACKAGES
ARG PIPX_PACKAGES
ARG CARGO_PACKAGES

# Build arguments for git config
ARG GIT_USER_NAME
ARG GIT_USER_EMAIL
ARG GIT_PULL_REBASE
ARG GIT_INIT_DEFAULT_BRANCH
ARG GIT_CORE_EDITOR
ARG GIT_CORE_EXCLUDESFILE_CONTENT

ARG TZ=UTC
ENV DEBIAN_FRONTEND=noninteractive
ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US:en
ENV LC_ALL=en_US.UTF-8
ENV EDITOR=vim
ENV VISUAL=vim
ENV PAGER="less -R"
ENV TERM=xterm-256color

# --- Base System Setup ---
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt/lists,sharing=locked \
    echo "${TZ}" > /etc/timezone && \
    apt-get update && apt-get install -y \
    locales \
    curl wget git git-lfs build-essential \
    python3 python3-dev python3-pip python3-venv \
    ansible \
    supervisor \
    sudo \
    nano vim \
    unzip zip tree jq \
    htop lsof \
    netcat-openbsd telnet dnsutils iputils-ping \
    zsh zsh-syntax-highlighting \
    tzdata \
    && locale-gen en_US.UTF-8 && update-locale LANG=en_US.UTF-8

# --- User Setup ---
RUN groupadd -f -g ${PROJECT_GID} ${PROJECT_USER} && \
    useradd -m -u ${PROJECT_UID} -g ${PROJECT_GID} -s /bin/zsh ${PROJECT_USER} && \
    usermod -aG sudo ${PROJECT_USER} && \
    echo "${PROJECT_USER} ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/90-nopasswd-user

# --- Git Configuration ---
USER ${PROJECT_USER}
WORKDIR /home/${PROJECT_USER}
SHELL ["/bin/bash", "-c"]
RUN if [ -n "${GIT_USER_NAME}" ]; then git config --global user.name "${GIT_USER_NAME}"; fi && \
    if [ -n "${GIT_USER_EMAIL}" ]; then git config --global user.email "${GIT_USER_EMAIL}"; fi && \
    if [ -n "${GIT_PULL_REBASE}" ]; then git config --global pull.rebase "${GIT_PULL_REBASE}"; fi && \
    if [ -n "${GIT_INIT_DEFAULT_BRANCH}" ]; then git config --global init.defaultBranch "${GIT_INIT_DEFAULT_BRANCH}"; fi && \
    if [ -n "${GIT_CORE_EDITOR}" ]; then git config --global core.editor "${GIT_CORE_EDITOR}"; fi && \
    if [ -n "${GIT_CORE_EXCLUDESFILE_CONTENT}" ]; then echo "${GIT_CORE_EXCLUDESFILE_CONTENT}" > /home/${PROJECT_USER}/.gitignore_global && git config --global core.excludesfile /home/${PROJECT_USER}/.gitignore_global; fi

# --- Language Runtimes & Package Managers ---
# Pre-create .nvm directory with correct ownership before cache mount
RUN mkdir -p /home/${PROJECT_USER}/.nvm

RUN --mount=type=cache,target=/home/${PROJECT_USER}/.nvm/.cache,uid=${PROJECT_UID},gid=${PROJECT_GID} \
    curl -o- "https://raw.githubusercontent.com/nvm-sh/nvm/${NVM_VERSION}/install.sh" | bash && \
    export NVM_DIR="$HOME/.nvm" && \
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && \
    nvm install ${NODE_VERSION} && \
    nvm use ${NODE_VERSION} && \
    nvm alias default ${NODE_VERSION} && \
    corepack enable && \
    corepack prepare pnpm@${PNPM_VERSION} --activate

RUN --mount=type=cache,target=/home/${PROJECT_USER}/.rustup,uid=${PROJECT_UID},gid=${PROJECT_GID} \
    if [ -n "${CARGO_PACKAGES}" ]; then \
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain ${RUST_VERSION} --no-modify-path; \
fi

RUN if [ -n "${PIPX_PACKAGES}" ]; then \
    python3 -m pip install --user --break-system-packages pipx; \
    python3 -m pipx ensurepath; \
fi

# --- Package Installation ---
ENV NVM_DIR=/home/${PROJECT_USER}/.nvm
ENV PATH="/home/${PROJECT_USER}/.cargo/bin:/home/${PROJECT_USER}/.local/bin:${NVM_DIR}/versions/node/v${NODE_VERSION}/bin:${PATH}"

USER root
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt/lists,sharing=locked \
    if [ -n "${APT_PACKAGES}" ]; then \
    apt-get update && apt-get install -y ${APT_PACKAGES}; \
fi
USER ${PROJECT_USER}

# NPM Package Installation
RUN --mount=type=cache,target=/home/${PROJECT_USER}/.npm,uid=${PROJECT_UID},gid=${PROJECT_GID} \
    if [ -n "${NPM_PACKAGES}" ]; then \
        echo "Installing NPM packages: ${NPM_PACKAGES}"; \
        . "$NVM_DIR/nvm.sh" && npm install -g ${NPM_PACKAGES}; \
    fi

# Python Package Installation
RUN --mount=type=cache,target=/home/${PROJECT_USER}/.cache/pip,uid=${PROJECT_UID},gid=${PROJECT_GID} \
    if [ -n "${PIP_PACKAGES}" ]; then \
        echo "Installing Python packages: ${PIP_PACKAGES}"; \
        pip3 install --user --break-system-packages ${PIP_PACKAGES}; \
    fi

# Cargo Package Installation
RUN --mount=type=cache,target=/home/${PROJECT_USER}/.cargo/registry,uid=${PROJECT_UID},gid=${PROJECT_GID} \
    --mount=type=cache,target=/home/${PROJECT_USER}/.cargo/git,uid=${PROJECT_UID},gid=${PROJECT_GID} \
    if [ -n "${CARGO_PACKAGES}" ]; then \
        echo "Installing Cargo packages: ${CARGO_PACKAGES}"; \
        . "$HOME/.cargo/env" && cargo install ${CARGO_PACKAGES}; \
    fi


# --- Resource & Configuration Embedding ---
USER root
RUN mkdir -p /app/shared/ansible /app/shared/services /app/shared/templates /app/shared/settings
COPY --chown=${PROJECT_UID}:${PROJECT_GID} shared /app/shared

# --- Cargo Registry Configuration ---
USER ${PROJECT_USER}
RUN echo '' >> /home/${PROJECT_USER}/.zshrc && \
    echo '# --- VM CARGO REGISTRY CONFIGURATION ---' >> /home/${PROJECT_USER}/.zshrc && \
    echo 'if [ -n "$VM_CARGO_REGISTRY_HOST" ] && [ -n "$VM_CARGO_REGISTRY_PORT" ]; then' >> /home/${PROJECT_USER}/.zshrc && \
    echo '    mkdir -p ~/.cargo' >> /home/${PROJECT_USER}/.zshrc && \
    echo '    cat > ~/.cargo/config.toml << EOF' >> /home/${PROJECT_USER}/.zshrc && \
    echo '[source.crates-io]' >> /home/${PROJECT_USER}/.zshrc && \
    echo 'replace-with = "vm-registry"' >> /home/${PROJECT_USER}/.zshrc && \
    echo '' >> /home/${PROJECT_USER}/.zshrc && \
    echo '[source.vm-registry]' >> /home/${PROJECT_USER}/.zshrc && \
    echo "registry = \"sparse+http://\${VM_CARGO_REGISTRY_HOST}:\${VM_CARGO_REGISTRY_PORT}/cargo/\"" >> /home/${PROJECT_USER}/.zshrc && \
    echo '' >> /home/${PROJECT_USER}/.zshrc && \
    echo '[net]' >> /home/${PROJECT_USER}/.zshrc && \
    echo 'retry = 2' >> /home/${PROJECT_USER}/.zshrc && \
    echo 'EOF' >> /home/${PROJECT_USER}/.zshrc && \
    echo 'fi' >> /home/${PROJECT_USER}/.zshrc

# --- Git Worktree Auto-Repair Configuration ---
# Create shared initialization script that runs for ALL shells (interactive, non-interactive, bash, zsh, sh)
USER root
RUN mkdir -p /etc/profile.d && \
    cat > /etc/profile.d/vm-worktree-repair.sh << 'EOF'
#!/bin/sh
# VM Git Worktree Auto-Repair
# Automatically repairs worktree paths when switching between host and container
if [ -d "/workspace/.git" ] || [ -f "/workspace/.git" ]; then
    # Run in background, suppress all output, ignore errors
    (cd /workspace 2>/dev/null && git worktree repair 2>/dev/null || true) &
fi
EOF

# Make executable and source from all shell configs
RUN chmod +x /etc/profile.d/vm-worktree-repair.sh && \
    echo '. /etc/profile.d/vm-worktree-repair.sh' >> /etc/bash.bashrc && \
    echo '. /etc/profile.d/vm-worktree-repair.sh' >> /home/${PROJECT_USER}/.bashrc && \
    echo '. /etc/profile.d/vm-worktree-repair.sh' >> /home/${PROJECT_USER}/.zshrc

# --- Git Worktree Helper Configuration ---
# Set VM_WORKTREES environment variable and create vm-worktree command
RUN echo 'export VM_WORKTREES={{ worktrees_base_dir }}' >> /etc/bash.bashrc && \
    echo 'export VM_WORKTREES={{ worktrees_base_dir }}' >> /home/${PROJECT_USER}/.bashrc && \
    echo 'export VM_WORKTREES={{ worktrees_base_dir }}' >> /home/${PROJECT_USER}/.zshrc

# Install vm-worktree helper command
COPY vm-worktree.sh /usr/local/bin/vm-worktree
RUN chmod +x /usr/local/bin/vm-worktree

# --- Shell History Configuration ---
USER ${PROJECT_USER}

# Create persistent history directory
RUN mkdir -p /home/${PROJECT_USER}/.shell_history

# Configure Zsh history
RUN echo '' >> /home/${PROJECT_USER}/.zshrc && \
    echo '# --- Shell History Settings ---' >> /home/${PROJECT_USER}/.zshrc && \
    echo 'export HISTSIZE=50000' >> /home/${PROJECT_USER}/.zshrc && \
    echo 'export SAVEHIST=50000' >> /home/${PROJECT_USER}/.zshrc && \
    echo 'export HISTFILE=~/.shell_history/zsh_history' >> /home/${PROJECT_USER}/.zshrc && \
    echo 'setopt INC_APPEND_HISTORY      # Append to history immediately' >> /home/${PROJECT_USER}/.zshrc && \
    echo 'setopt SHARE_HISTORY            # Share history across sessions' >> /home/${PROJECT_USER}/.zshrc && \
    echo 'setopt HIST_IGNORE_DUPS         # Ignore duplicate commands' >> /home/${PROJECT_USER}/.zshrc && \
    echo 'setopt HIST_FIND_NO_DUPS        # Do not show duplicates in search' >> /home/${PROJECT_USER}/.zshrc

# Configure Bash history
RUN echo '' >> /home/${PROJECT_USER}/.bashrc && \
    echo '# --- Shell History Settings ---' >> /home/${PROJECT_USER}/.bashrc && \
    echo 'export HISTSIZE=50000' >> /home/${PROJECT_USER}/.bashrc && \
    echo 'export HISTFILESIZE=50000' >> /home/${PROJECT_USER}/.bashrc && \
    echo 'export HISTFILE=~/.shell_history/bash_history' >> /home/${PROJECT_USER}/.bashrc && \
    echo 'export HISTCONTROL=ignoredups:erasedups' >> /home/${PROJECT_USER}/.bashrc && \
    echo 'shopt -s histappend' >> /home/${PROJECT_USER}/.bashrc && \
    echo 'PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"' >> /home/${PROJECT_USER}/.bashrc

# --- Git Worktree Discovery Message ---
RUN echo '' >> /home/${PROJECT_USER}/.zshrc && \
    echo '# Show vm-worktree hint on first login' >> /home/${PROJECT_USER}/.zshrc && \
    echo 'if [[ ! -f ~/.vm_worktree_tip_shown ]] && [[ -n "${VM_WORKTREES:-}" ]]; then' >> /home/${PROJECT_USER}/.zshrc && \
    echo '    echo ""' >> /home/${PROJECT_USER}/.zshrc && \
    echo '    echo "ðŸ’¡ Tip: Use \\033[1;36mvm-worktree\\033[0m to create git worktrees that work on both host and container:"' >> /home/${PROJECT_USER}/.zshrc && \
    echo '    echo "  \\033[0;32mvm-worktree add feature-x\\033[0m   # Create new worktree"' >> /home/${PROJECT_USER}/.zshrc && \
    echo '    echo "  \\033[0;32mvm-worktree list\\033[0m            # List all worktrees"' >> /home/${PROJECT_USER}/.zshrc && \
    echo '    echo ""' >> /home/${PROJECT_USER}/.zshrc && \
    echo '    touch ~/.vm_worktree_tip_shown' >> /home/${PROJECT_USER}/.zshrc && \
    echo 'fi' >> /home/${PROJECT_USER}/.zshrc

RUN echo '' >> /home/${PROJECT_USER}/.bashrc && \
    echo '# Show vm-worktree hint on first login' >> /home/${PROJECT_USER}/.bashrc && \
    echo 'if [[ ! -f ~/.vm_worktree_tip_shown ]] && [[ -n "${VM_WORKTREES:-}" ]]; then' >> /home/${PROJECT_USER}/.bashrc && \
    echo '    echo ""' >> /home/${PROJECT_USER}/.bashrc && \
    echo '    echo -e "ðŸ’¡ Tip: Use \\033[1;36mvm-worktree\\033[0m to create git worktrees that work on both host and container:"' >> /home/${PROJECT_USER}/.bashrc && \
    echo '    echo -e "  \\033[0;32mvm-worktree add feature-x\\033[0m   # Create new worktree"' >> /home/${PROJECT_USER}/.bashrc && \
    echo '    echo -e "  \\033[0;32mvm-worktree list\\033[0m            # List all worktrees"' >> /home/${PROJECT_USER}/.bashrc && \
    echo '    echo ""' >> /home/${PROJECT_USER}/.bashrc && \
    echo '    touch ~/.vm_worktree_tip_shown' >> /home/${PROJECT_USER}/.bashrc && \
    echo 'fi' >> /home/${PROJECT_USER}/.bashrc

# --- Worktree Prompt Indicator ---
# Add prompt indicator for bash
RUN echo '' >> /home/${PROJECT_USER}/.bashrc && \
    echo '# Show worktree in prompt if inside one' >> /home/${PROJECT_USER}/.bashrc && \
    echo 'if [[ -n "${VM_WORKTREES:-}" ]] && [[ "$PWD" == "$VM_WORKTREES"/* ]]; then' >> /home/${PROJECT_USER}/.bashrc && \
    echo '    WT_NAME=$(basename "$PWD")' >> /home/${PROJECT_USER}/.bashrc && \
    echo '    PS1="(worktree:$WT_NAME) $PS1"' >> /home/${PROJECT_USER}/.bashrc && \
    echo 'fi' >> /home/${PROJECT_USER}/.bashrc

# Add prompt indicator for zsh
RUN echo '' >> /home/${PROJECT_USER}/.zshrc && \
    echo '# Show worktree in prompt if inside one' >> /home/${PROJECT_USER}/.zshrc && \
    echo 'precmd() {' >> /home/${PROJECT_USER}/.zshrc && \
    echo '    if [[ -n "${VM_WORKTREES:-}" ]] && [[ "$PWD" == "$VM_WORKTREES"/* ]]; then' >> /home/${PROJECT_USER}/.zshrc && \
    echo '        WT_NAME=$(basename "$PWD")' >> /home/${PROJECT_USER}/.zshrc && \
    echo '        PROMPT="(worktree:$WT_NAME) %~ %# "' >> /home/${PROJECT_USER}/.zshrc && \
    echo '    else' >> /home/${PROJECT_USER}/.zshrc && \
    echo '        PROMPT="%~ %# "' >> /home/${PROJECT_USER}/.zshrc && \
    echo '    fi' >> /home/${PROJECT_USER}/.zshrc && \
    echo '}' >> /home/${PROJECT_USER}/.zshrc

# --- Finalization ---
USER ${PROJECT_USER}
WORKDIR /workspace
CMD ["tail", "-f", "/dev/null"]