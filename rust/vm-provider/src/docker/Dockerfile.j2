# VM Tool Docker Provider - Self-Contained Development Container
FROM ubuntu:24.04

# Build arguments
ARG PROJECT_USER=developer
ARG PROJECT_UID=1000
ARG PROJECT_GID=1000

# VM.yaml configuration passed as build args
ARG NODE_VERSION=22
ARG NVM_VERSION=v0.40.3
ARG PNPM_VERSION=10.12.3
ARG PYTHON_VERSION=3.11
ARG TIMEZONE=America/Los_Angeles

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Set locale to avoid encoding issues
ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US:en
ENV LC_ALL=en_US.UTF-8

# Set timezone
ENV TZ=${TIMEZONE}

# Install system packages and build essentials
RUN apt-get update && apt-get install -y \
    locales \
    python3 \
    python3-pip \
    python3-dev \
    ansible \
    supervisor \
    openssh-server \
    docker.io \
    sudo \
    zsh \
    tzdata \
    curl \
    wget \
    git \
    build-essential \
    # APT packages from vm.yaml
    {% if config.apt_packages and config.apt_packages | length > 0 -%}
    {% for package in config.apt_packages %}{{ package }} \
    {% endfor %}
    {%- endif %}
    && locale-gen en_US.UTF-8 \
    && update-locale LANG=en_US.UTF-8 \
    && rm -rf /var/lib/apt/lists/*

# Create render group for GPU access
RUN groupadd -f render

# Create user with specific UID to match host for file permissions
RUN set -e && \
    # Handle the "ubuntu" user that exists in Ubuntu base images
    if id ubuntu >/dev/null 2>&1 && [ "${PROJECT_USER}" != "ubuntu" ]; then \
        usermod -l ${PROJECT_USER} ubuntu && \
        usermod -d /home/${PROJECT_USER} -m ${PROJECT_USER} && \
        groupmod -n ${PROJECT_USER} ubuntu 2>/dev/null || true; \
    fi && \
    # Handle UID/GID mapping
    if id ${PROJECT_USER} >/dev/null 2>&1; then \
        CURRENT_UID=$(id -u ${PROJECT_USER}); \
        if [ "$CURRENT_UID" != "${PROJECT_UID}" ]; then \
            usermod -u ${PROJECT_UID} ${PROJECT_USER}; \
        fi; \
    else \
        if getent group ${PROJECT_GID} >/dev/null 2>&1; then \
            EXISTING_GROUP=$(getent group ${PROJECT_GID} | cut -d: -f1); \
            useradd -m -u ${PROJECT_UID} -g ${EXISTING_GROUP} -s /bin/zsh ${PROJECT_USER}; \
        else \
            groupadd -g ${PROJECT_GID} ${PROJECT_USER} && \
            useradd -m -u ${PROJECT_UID} -g ${PROJECT_USER} -s /bin/zsh ${PROJECT_USER}; \
        fi; \
    fi && \
    usermod -aG sudo,docker ${PROJECT_USER} && \
    echo "${PROJECT_USER} ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/90-nopasswd-user && \
    chmod 0440 /etc/sudoers.d/90-nopasswd-user && \
    mkdir -p /home/${PROJECT_USER}/.local/state/pipx/log && \
    mkdir -p /home/${PROJECT_USER}/.local/bin && \
    chown -R ${PROJECT_UID}:${PROJECT_GID} /home/${PROJECT_USER}

# Switch to project user for package installations
USER ${PROJECT_USER}
WORKDIR /home/${PROJECT_USER}

# Install Node.js and NPM packages
RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/${NVM_VERSION}/install.sh | bash \
    && . ~/.nvm/nvm.sh \
    && nvm install ${NODE_VERSION} \
    && nvm use ${NODE_VERSION} \
    && nvm alias default ${NODE_VERSION} \
    && npm install -g npm@latest \
    && npm install -g pnpm@${PNPM_VERSION} \
    {% if config.npm_packages and config.npm_packages | length > 0 -%}
    && npm install -g {% for package in config.npm_packages %}{{ package }} {% endfor %} \
    {%- endif %}
    && echo 'export NVM_DIR="$HOME/.nvm"' >> ~/.bashrc \
    && echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> ~/.bashrc \
    && echo '[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"' >> ~/.bashrc

# Install Python packages with pipx for CLI tools and pip for libraries
{% if config.pip_packages and config.pip_packages | length > 0 -%}
RUN pip3 install pipx \
    && echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.bashrc \
    {% for package in config.pip_packages -%}
    && pipx install {{ package }} \
    {% endfor %}
{%- endif %}

# Switch back to root for copying files and final setup
USER root

# Copy embedded shared resources
COPY shared/ /embedded-shared/
COPY ansible/ /embedded-ansible/

# Create workspace directory
RUN mkdir -p /workspace && chown ${PROJECT_UID}:${PROJECT_GID} /workspace

# Configure SSH (disabled by default for security)
RUN mkdir /var/run/sshd && \
    sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin no/' /etc/ssh/sshd_config && \
    sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config

# Switch back to project user
USER ${PROJECT_USER}
WORKDIR /home/${PROJECT_USER}

# Set default shell to zsh
SHELL ["/bin/zsh", "-c"]

# Environment variables for runtime
ENV NVM_DIR="/home/${PROJECT_USER}/.nvm"
ENV PATH="/home/${PROJECT_USER}/.local/bin:$PATH"

# The workspace directory will be mounted at runtime
VOLUME ["/workspace"]

# Default to a shell session
CMD ["/bin/zsh"]