# VM Tool Self-Contained Development Container
FROM ubuntu:24.04

# Build arguments for users, and package versions
ARG PROJECT_USER=developer
ARG PROJECT_UID=1000
ARG PROJECT_GID=1000
ARG NODE_VERSION=22
ARG NVM_VERSION=v0.40.3
ARG PNPM_VERSION=10.12.3
ARG RUST_VERSION=stable

# Build arguments for package lists
ARG APT_PACKAGES
ARG NPM_PACKAGES
ARG PIP_PACKAGES
ARG PIPX_PACKAGES
ARG CARGO_PACKAGES

ENV DEBIAN_FRONTEND=noninteractive
ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US:en
ENV LC_ALL=en_US.UTF-8
ENV TZ=UTC

# --- Base System Setup ---
RUN apt-get update && apt-get install -y \
    locales \
    curl wget git git-lfs build-essential \
    python3 python3-dev python3-pip python3-venv \
    ansible \
    supervisor \
    sudo \
    zsh zsh-syntax-highlighting \
    tzdata \
    && locale-gen en_US.UTF-8 && update-locale LANG=en_US.UTF-8 \
    && rm -rf /var/lib/apt/lists/*

# --- User Setup ---
RUN groupadd -f -g ${PROJECT_GID} ${PROJECT_USER} && \
    useradd -m -u ${PROJECT_UID} -g ${PROJECT_GID} -s /bin/zsh ${PROJECT_USER} && \
    usermod -aG sudo ${PROJECT_USER} && \
    echo "${PROJECT_USER} ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/90-nopasswd-user

USER ${PROJECT_USER}
WORKDIR /home/${PROJECT_USER}
SHELL ["/bin/bash", "-c"]

# --- Language Runtimes & Package Managers ---
RUN curl -o- "https://raw.githubusercontent.com/nvm-sh/nvm/${NVM_VERSION}/install.sh" | bash && \
    export NVM_DIR="$HOME/.nvm" && \
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && \
    nvm install ${NODE_VERSION} && \
    nvm use ${NODE_VERSION} && \
    nvm alias default ${NODE_VERSION} && \
    corepack enable && \
    corepack prepare pnpm@${PNPM_VERSION} --activate

RUN if [ -n "${CARGO_PACKAGES}" ]; then \
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain ${RUST_VERSION} --no-modify-path; \
fi

RUN if [ -n "${PIPX_PACKAGES}" ]; then \
    python3 -m pip install --user --break-system-packages pipx; \
    python3 -m pipx ensurepath; \
fi

# --- Package Installation ---
ENV NVM_DIR=/home/${PROJECT_USER}/.nvm
ENV PATH="/home/${PROJECT_USER}/.cargo/bin:/home/${PROJECT_USER}/.local/bin:${NVM_DIR}/versions/node/v${NODE_VERSION}/bin:${PATH}"

USER root
RUN if [ -n "${APT_PACKAGES}" ]; then \
    apt-get update && apt-get install -y ${APT_PACKAGES} && rm -rf /var/lib/apt/lists/*; \
fi
USER ${PROJECT_USER}

# NPM Package Installation
RUN if [ -n "${NPM_PACKAGES}" ]; then \
    for package in ${NPM_PACKAGES}; do \
        echo "Installing NPM package: $package"; \
        . "$NVM_DIR/nvm.sh" && npm install -g "$package" 2>/dev/null && \
        echo "  ✓ Installed from npm registry" || \
        echo "  ⚠️ Warning: Failed to install '$package' from npm registry"; \
    done; \
fi

# Python Package Installation
RUN if [ -n "${PIP_PACKAGES}" ]; then \
    for package in ${PIP_PACKAGES}; do \
        echo "Installing Python package: $package"; \
        if pip3 install --user --break-system-packages "$package" 2>/dev/null; then \
            echo "  ✓ Installed from PyPI via pip"; \
        elif . "$HOME/.profile" && pipx install "$package" 2>/dev/null; then \
            echo "  ✓ Installed from PyPI via pipx"; \
        else \
            echo "  ⚠️ Warning: Failed to install '$package' via any method"; \
        fi; \
    done; \
fi

# Cargo Package Installation
RUN if [ -n "${CARGO_PACKAGES}" ]; then \
    for package in ${CARGO_PACKAGES}; do \
        echo "Installing Cargo package: $package"; \
        if . "$HOME/.cargo/env" && cargo install "$package" 2>/dev/null; then \
            echo "  ✓ Installed from cargo registry"; \
        else \
            echo "  ⚠️ Warning: Failed to install cargo package '$package'"; \
        fi; \
    done; \
fi


# --- Resource & Configuration Embedding ---
USER root
RUN mkdir -p /app/shared/ansible /app/shared/services /app/shared/templates /app/shared/settings
COPY shared /app/shared
RUN chown -R ${PROJECT_UID}:${PROJECT_GID} /app

# --- Finalization ---
RUN mkdir -p /workspace && chown ${PROJECT_UID}:${PROJECT_GID} /workspace
USER ${PROJECT_USER}
WORKDIR /workspace
CMD ["tail", "-f", "/dev/null"]