# This is a Tera template for docker-compose.yml
# It will be rendered by the vm-provider crate.

services:
  {{ project_name }}-dev:
    container_name: {{ project_name }}-dev
    build:
      context: {{ build_context_dir }}
      dockerfile: Dockerfile.generated
      args:
        PROJECT_UID: {{ project_uid }}
        PROJECT_GID: {{ project_gid }}
        PROJECT_USER: {{ project_user }}
    image: {{ project_name }}:latest
    labels:
      - "com.vm.managed=true"
      - "com.vm.project={{ project_name }}"
    {% if config.services.postgresql.enabled | default(value=false) -%}
    depends_on:
      - postgres
    {%- endif %}
    volumes:
      - {{ project_dir }}:/workspace:rw
      {% if worktrees %}
      # Git worktrees
      {% for worktree in worktrees %}
      - {{ worktree.0 }}:/workspace/{{ worktree.1 }}:rw
      {% endfor %}
      {% endif %}
      {% if is_macos %}
      # macOS specific volume for audio
      - /tmp/pulseaudio.socket:/tmp/pulseaudio.socket
      {% endif %}
      # Host package mounts for development
      {% if host_mounts %}{% for mount in host_mounts %}- {{ mount.0 }}:{{ mount.1 }}:ro
      {% endfor %}{% endif %}
      # Container is now self-contained - no VM tool mount needed
    {% if config.ports.mappings or config.ports._range -%}
    ports:
      # Explicit port mappings from vm.yaml
      {% if config.ports.mappings -%}
      {% for mapping in config.ports.mappings -%}
      - "{{ mapping.host }}:{{ mapping.guest }}{% if mapping.protocol | lower == 'udp' %}/udp{% endif %}"
      {% endfor -%}
      {%- endif %}
      # Application port range (excluding ports used by service containers)
      {% if config.ports._range -%}
      {% set range_start = config.ports._range[0] %}
      {% set range_end = config.ports._range[1] %}
      {% set service_ports = [] %}
      {% if config.services.postgresql.enabled | default(value=false) and config.services.postgresql.port %}
        {% set_global service_ports = service_ports | concat(with=[config.services.postgresql.port]) %}
      {% endif %}
      {% if config.services.redis.enabled | default(value=false) and config.services.redis.port %}
        {% set_global service_ports = service_ports | concat(with=[config.services.redis.port]) %}
      {% endif %}
      {% if config.services.mongodb.enabled | default(value=false) and config.services.mongodb.port %}
        {% set_global service_ports = service_ports | concat(with=[config.services.mongodb.port]) %}
      {% endif %}
      {% if service_ports | length == 0 %}
      # No service ports to exclude, expose full range
      - "{{ range_start }}-{{ range_end }}:{{ range_start }}-{{ range_end }}"
      {% else %}
      # Expose port range excluding service ports: {{ service_ports }}
      {% for port in range(start=range_start, end=range_end + 1) %}
        {% if port not in service_ports %}
      - "{{ port }}:{{ port }}"
        {% endif %}
      {% endfor %}
      {% endif %}
      {%- endif %}
    {%- endif %}
    environment:
      {% if is_macos %}
      - PULSE_SERVER=unix:/tmp/pulseaudio.socket
      {% endif %}
      {% if config.services.postgresql.enabled | default(value=false) %}
      - DATABASE_URL=postgresql://{{ config.services.postgresql.user | default(value="postgres") }}:{{ config.services.postgresql.password | default(value="postgres") }}@postgres:5432/{{ config.services.postgresql.database | default(value=project_name ~ "_dev") }}
      {% endif %}
      # Disable Python bytecode generation for clean read-only mounting
      - PYTHONDONTWRITEBYTECODE=1
      # Host package environment variables
      {% if host_env_vars %}{% for env_var in host_env_vars %}- {{ env_var.0 }}={{ env_var.1 }}
      {% endfor %}{% endif %}
      {% if config.environment and config.environment | length > 0 -%}
      {% for name, value in config.environment %}- {{ name }}={{ value }}
      {% endfor %}
      {%- endif %}
    {% if config.security.enable_debugging | default(value=false) %}
    cap_add:
      - SYS_PTRACE
    {% endif %}
    {% if (config.security.enable_debugging | default(value=false)) or (config.security.no_new_privileges | default(value=false)) or (config.security.security_opts and config.security.security_opts | length > 0) %}
    security_opt:
      {% if config.security.enable_debugging | default(value=false) %}
      - seccomp=unconfined
      {% endif %}
      {% if config.security.no_new_privileges | default(value=false) %}
      - no-new-privileges
      {% endif %}
      {% if config.security.security_opts and config.security.security_opts | length > 0 %}
      {% for opt in config.security.security_opts %}- {{ opt }}
      {% endfor %}
      {% endif %}
    {% endif %}
    {% if config.security.user_namespaces | default(value=false) %}
    userns_mode: "host"
    {% endif %}
    {% if config.security.drop_capabilities and config.security.drop_capabilities | length > 0 %}
    cap_drop:
      {% for cap in config.security.drop_capabilities %}- {{ cap }}
      {% endfor %}
    {% endif %}
    {% if config.vm.memory %}
      {% if config.vm.memory != "unlimited" %}
    mem_limit: {{ config.vm.memory }}m
      {% endif %}
    {% elif config.security.memory_limit %}
    mem_limit: {{ config.security.memory_limit }}
    {% endif %}
    {% if config.vm.cpus %}
    cpus: "{{ config.vm.cpus }}"
    {% elif config.security.cpu_limit %}
    cpus: "{{ config.security.cpu_limit }}"
    {% endif %}
    {% if config.security.pids_limit %}
    pids_limit: {{ config.security.pids_limit }}
    {% endif %}
    {% if config.security.read_only_root | default(value=false) %}
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp
    {% endif %}
    command: ["tail", "-f", "/dev/null"]
    tty: true
    stdin_open: true

  {% if config.services.postgresql.enabled | default(value=false) %}
  postgres:
    image: postgres:15-alpine
    container_name: {{ project_name }}-postgres
    environment:
      - POSTGRES_DB={{ config.services.postgresql.database | default(value=project_name ~ "_dev") }}
      - POSTGRES_USER={{ config.services.postgresql.user | default(value="postgres") }}
      - POSTGRES_PASSWORD={{ config.services.postgresql.password | default(value="postgres") }}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "{{ config.services.postgresql.port | default(value=5432) }}:5432"
    restart: unless-stopped
  {% endif %}

{% if config.services.postgresql.enabled | default(value=false) %}
volumes:
  postgres_data:
{% endif %}
