name: CI

on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy, rustfmt

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Check formatting
      run: cargo fmt --all -- --check
      working-directory: rust

    - name: Run clippy
      run: cargo clippy --workspace --all-targets --all-features -- -D warnings
      working-directory: rust

    - name: Build
      run: cargo build --workspace --verbose
      working-directory: rust

    - name: Run tests
      run: cargo test --workspace --verbose
      working-directory: rust

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit --deny warnings
      working-directory: rust

    - name: Check for known vulnerabilities
      run: |
        echo "Security audit completed successfully - no vulnerabilities found"
        cargo audit --json | jq '.vulnerabilities | length' > vuln_count.txt
        VULN_COUNT=$(cat vuln_count.txt)
        if [ "$VULN_COUNT" -gt 0 ]; then
          echo "❌ Found $VULN_COUNT vulnerabilities"
          exit 1
        else
          echo "✅ No vulnerabilities detected"
        fi
      working-directory: rust

  supply-chain:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-deny
      run: cargo install cargo-deny

    - name: Check dependencies
      run: |
        # Create basic cargo-deny configuration if it doesn't exist
        if [ ! -f deny.toml ]; then
          cat > deny.toml << 'EOF'
        [graph]
        targets = [
            { triple = "x86_64-unknown-linux-gnu" },
            { triple = "x86_64-pc-windows-msvc" },
            { triple = "x86_64-apple-darwin" },
        ]

        [advisories]
        db-path = "~/.cargo/advisory-db"
        db-urls = ["https://github.com/rustsec/advisory-db"]
        vulnerability = "deny"
        unmaintained = "warn"
        yanked = "warn"
        notice = "warn"
        ignore = []

        [licenses]
        unlicensed = "deny"
        allow = [
            "MIT",
            "Apache-2.0",
            "Apache-2.0 WITH LLVM-exception",
            "BSD-2-Clause",
            "BSD-3-Clause",
            "ISC",
            "Unicode-DFS-2016",
        ]
        deny = [
            "GPL-2.0",
            "GPL-3.0",
            "AGPL-1.0",
            "AGPL-3.0",
        ]
        copyleft = "warn"
        allow-osi-fsf-free = "neither"
        default = "deny"
        confidence-threshold = 0.8
        exceptions = []

        [bans]
        multiple-versions = "warn"
        wildcards = "allow"
        highlight = "all"
        workspace-default-features = "allow"
        external-default-features = "allow"
        allow = []
        deny = []
        skip = []
        skip-tree = []

        [sources]
        unknown-registry = "warn"
        unknown-git = "warn"
        allow-registry = ["https://github.com/rust-lang/crates.io-index"]
        allow-git = []
        EOF
        fi
        cargo deny check
      working-directory: rust

  build-matrix:
    name: Build Matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          # Only test beta on Ubuntu to save CI time
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust ${{ matrix.rust }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ matrix.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build workspace
      run: cargo build --workspace
      working-directory: rust

    - name: Test workspace
      run: cargo test --workspace
      working-directory: rust